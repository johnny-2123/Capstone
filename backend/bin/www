require('dotenv').config();
const app = require('../app');
const db = require('../db/models');
const http = require('http');
const WebSocket = require('ws');
const { port } = require('../config');

const clients = new Map();

const findWebSocketByUsername = (username) => {
    const wsSet = clients.get(username);
    if (wsSet) {
        return Array.from(wsSet)[0];
    }
    return null;
};

const handleMessage = async (message, ws) => {
    console.log('Received: %s', message);
    const { type, data } = JSON.parse(message);

    let recipientWs;
    let user1;
    let user2;
    let gameId;
    let user1WS;
    let user2WS;
    switch (type) {
        case 'send-game-invite':
            recipientWs = findWebSocketByUsername(data.recipient);
            console.log('sending game invite')
            console.log('data', data)
            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
                const inviteMessage = JSON.stringify({
                    type: 'game-invite',
                    data: {
                        sender: ws.username,
                        user1Id: data.user1Id,
                        user2Id: data.user2Id
                    },
                });
                recipientWs.send(inviteMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
            } else {
                const errorMessage = JSON.stringify({
                    type: 'error',
                    data: {
                        message: `User ${data.recipient} is not online.`,
                    },
                });
                ws.send(errorMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
            }
            break;
        case 'accepted-game-invite':
            gameId = data.newGameId;
            console.log('newGameId', gameId)
            user1 = data.user1;
            console.log('user1', user1);
            user2 = data.user2;
            console.log('user2', user2)
            user1WS = findWebSocketByUsername(user1);
            console.log('user1WS:', user1WS)
            user2WS = findWebSocketByUsername(user2);
            console.log('user2WS:', user2WS)

            const startGameMessage = JSON.stringify({
                type: 'start-game',
                data: {
                    newGameId: gameId,
                    user1: user1,
                    user2: user2,
                },
            });

            user1WS.send(startGameMessage, (error) => error && console.log(`WebSocket send error: ${error}`));

            user2WS.send(startGameMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
            break;
        case 'send-game-won-message':
            gameId = data.gameId;
            console.log('gameId', gameId)
            user1 = data.user1;
            console.log('user1', user1)
            user2 = data.user2;
            console.log('user2', user2)

            user1WS = findWebSocketByUsername(user1);
            user2WS = findWebSocketByUsername(user2);

            const gameWonMessage = JSON.stringify({
                type: 'game-won',
                data: {
                    gameId: gameId
                }
            });

            user1WS.send(gameWonMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
            user2WS.send(gameWonMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
            break;
        case 'join':
            ws.room = data.room;
            ws.username = data.username;
            clients.set(ws.room, (clients.get(ws.room) || new Set()).add(ws));
            break;
        case 'direct-message':
            recipientWs = findWebSocketByUsername(data.recipient);
            console.log('data.recipient', data.recipient);
            console.log('message', data.message);
            if (!recipientWs) {
                console.log(`No WebSocket found for recipient: ${data.recipient}`);
                return;
            }
            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
                const directMessage = JSON.stringify({
                    type: 'direct-message',
                    data: {
                        sender: ws.username,
                        recipient: data.recipient,
                        message: data.message,
                    },
                });
                console.log('Sending direct message: %s', directMessage);
                recipientWs.send(directMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
            }
            break;
        default:
            console.log('Invalid message type:', type);
    }
};

db.sequelize.authenticate().then(() => {
    console.log('Database connection success! Sequelize is ready to use...');

    const server = http.createServer(app);
    const wss = new WebSocket.Server({
        server,
        verifyClient: ({ req }) => {
            req.username = new URL(req.url, `http://${req.headers.host}`).searchParams.get('username');
            console.log('Username: ', req.username);
            const friendsParam = new URL(req.url, `http://${req.headers.host}`).searchParams.get('friends');
            if (!friendsParam) {
                console.log('Friends parameter is missing');
                return false;  // refuse the connection
            }
            try {
                req.friends = JSON.parse(friendsParam);
            } catch (e) {
                console.log('Failed to parse friends parameter:', e);
                req.friends = [];
            }
            console.log('Friends: ', req.friends);
            return true;
        },
    });

    wss.on('connection', async (ws, req) => {
        console.log('Client connected');
        ws.username = req.username;
        console.log('Username: ', ws.username);
        ws.friends = req.friends;
        console.log('Friends: ', ws.friends);

        ws.isAlive = true;
        clients.set(ws.username, (clients.get(ws.username) || new Set()).add(ws));

        for (const friend of ws.friends) {
            let friendWs = findWebSocketByUsername(friend);
            console.log('Friend in friend of friends: ', friend);
            // console.log('FriendWs.username: ', friendWs);
            if (friendWs && friendWs.readyState === WebSocket.OPEN) {
                const friendMessage = JSON.stringify({
                    type: 'friend-online',
                    data: {
                        username: ws.username,
                    },
                });
                console.log('Sending friend message: %s', friendMessage);
                console.log('Friend: ', friend);
                friendWs.send(friendMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
            }
        }


        ws.on('pong', () => ws.isAlive = true);
        ws.on('message', (message) => {
            try {
                handleMessage(message, ws);
            } catch (error) {
                console.error('Error while handling message:', error);
            }
        });
        ws.on('error', (error) => console.log(`WebSocket error: ${error}`));
        ws.on('close', async () => {
            console.log('Client disconnected');
            console.log('Username: ', ws.username);
            console.log('ws.friends', ws.friends);
            for (const friend of ws.friends) {
                let friendWs = findWebSocketByUsername(friend);
                console.log('Friend in friend of friends: ', friend);
                // console.log('FriendWs.username: ', friendWs);
                if (friendWs && friendWs.readyState === WebSocket.OPEN) {
                    const friendMessage = JSON.stringify({
                        type: 'friend-offline',
                        data: {
                            username: ws.username,
                        },
                    });
                    console.log('Sending friend message: %s', friendMessage);
                    console.log('Friend: ', friend);
                    friendWs.send(friendMessage, (error) => error && console.log(`WebSocket send error: ${error}`));
                }
            }

            // Delete the client from the room set when disconnected.
            clients.get(ws.room)?.delete(ws);
            if ((clients.get(ws.room)?.size || 0) === 0) {
                clients.delete(ws.room);
            }
            // Remove user from clients map as well
            clients.get(ws.username)?.delete(ws);
            if ((clients.get(ws.username)?.size || 0) === 0) {
                clients.delete(ws.username);
            }
        });
    });

    setInterval(() => {
        wss.clients.forEach((ws) => {
            if (!ws.isAlive) ws.terminate();
            ws.isAlive = false;
            ws.ping();
        });
    }, 30000);

    server.listen(port, () => console.log(`Listening on port ${port}...`));
}).catch((err) => {
    console.log('Database connection failure.');
    console.error(err);
});
