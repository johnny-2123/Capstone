require('dotenv').config();

const { port } = require('../config');
const app = require('../app');
const db = require('../db/models');
const http = require('http');
const WebSocket = require('ws');

const clients = new Map();

const findWebSocketByUsername = (username) => {
    for (const [user, wsSet] of clients.entries()) {
        if (user === username) {
            return Array.from(wsSet)[0];
        }
    }
    return null;
};

const sendDirectMessageToUsername = (username, message) => {
    const wsSet = clients.get(username);
    if (!wsSet) {
        return;
    }

    wsSet.forEach(ws => {
        if (ws.readyState === WebSocket.OPEN) {
            ws.send(message);
        }
    });
};


const handleMessage = (message, ws) => {
    console.log('received: %s', message);

    const { type, data } = JSON.parse(message);
    console.log('type:', type);

    if (type === 'join') {
        const { room, username } = data;
        ws.room = room;
        ws.username = username;

        if (!clients.has(room)) {
            clients.set(room, new Set());
        }
        clients.get(room).add(ws);
    } else if (type === 'message') {
        const room = ws.room;
        const username = ws.username;

        if (clients.has(room)) {
            const roomClients = clients.get(room);
            roomClients.forEach((client) => {
                const msg = JSON.stringify(`${username}: ${data.message}`);
                client.send(msg, (error) => {
                    if (error) {
                        console.log(`WebSocket send error: ${error}`);
                    }
                });
            });
        }
    } else if (type === 'direct-message') {
        const { recipient, message } = data;
        const recipientWs = findWebSocketByUsername(recipient);

        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
            const directMessage = JSON.stringify(`${ws.username} (direct): ${message}`);
            recipientWs.send(directMessage, (error) => {
                if (error) {
                    console.log(`WebSocket send error: ${error}`);
                }
            });
        }
    }
};

db.sequelize
    .authenticate()
    .then(() => {
        console.log('Database connection success! Sequelize is ready to use...');

        const server = http.createServer(app);

        const wss = new WebSocket.Server({
            server,
            verifyClient: ({ req }) => {
                const { searchParams } = new URL(req.url, `http://${req.headers.host}`);
                req.username = searchParams.get('username');
                console.log('username: ', req.username);
                return true;
            },
        });

        wss.on('connection', (ws, req) => {
            console.log('Client connected');

            const { username } = req;

            ws.username = username;
            ws.isAlive = true;

            db.User.update({ guid: ws.id }, { where: { username } });

            if (!clients.has(username)) {
                clients.set(username, new Set());
            }

            clients.get(username).add(ws);

            ws.on('pong', () => {
                ws.isAlive = true;
            });

            ws.on('message', (message) => handleMessage(message, ws));

            ws.on('error', (error) => {
                console.log(`WebSocket error: ${error}`);
            });

            ws.on('close', () => {
                console.log('Client disconnected');

                const { username } = ws;

                if (clients.has(username)) {
                    clients.get(username).delete(ws);
                    if (clients.get(username).size === 0) {
                        clients.delete(username);
                    }
                }

                db.User.update({ guid: null }, { where: { username } });
            });
        });

        setInterval(() => {
            wss.clients.forEach((ws) => {
                if (!ws.isAlive) return ws.terminate();
                ws.isAlive = false;
                ws.ping();
            });
        }, 30000);

        server.listen(port, () => console.log(`Listening on port ${port}...`));
    })
    .catch((err) => {
        console.log('Database connection failure.');
        console.error(err);
    });
